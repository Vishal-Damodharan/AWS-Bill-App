---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Cloud Formation to build network infrastructure which includes VPC,Subnets,IGW
  and public Route
Parameters:
  VpcCIDR:
    Type: String
    Description: VPC IP Range
  Subnet1:
    Type: String
    Description: Ip address range for subnet in availability zone
  Subnet2:
    Type: String
    Description: Ip address range for subnet in availability zone
  Subnet3:
    Type: String
    Description: Ip address range for subnet in availability zone
  AvailabilityZoneA:
    Type: String
    Description: " Availability Zone for subnet"
  AvailabilityZoneB:
    Type: String
    Description: Availability Zone for subnet
  AvailabilityZoneC:
    Type: String
    Description: Availability Zone for subnet
  IpAddr:
    Type: String
    Description: Route attached to my route table connected with internet gateway
  BucketName:
    Type: String
    Description: Name of the bucket
  SSEAlgorithm:
    Type: String
    Description: Encryption of the bucket
  LifecycleID:
    Type: String
    Description: Lifecycle ID of the bucket
  LifecycleStatus:
    Type: String
    Description: Lifecycle status of the bucket
  LifecyclePrefix:
    Type: String
    Description: Lifecycle prefix of the bucket
  LifecycleExpirationInDays:
    Type: Number
    Description: Lifecycle expiration of the bucket
  LifecycleTransitionindays:
    Type: Number
    Description: Lifecycle transition of the bucket
  LifecycleStorageClass:
    Type: String
    Description: Lifecycle Storage of the bucket
  ARNBucketName:
    Type: String
    Description: ARN of the bucket
  ARNBucketNameObj:
    Type: String
    Description: OBJ of the bucket
  DeviceName:
    Type: String
    Description: Encryption of the bucket
  VolumeType:
    Type: String
    Description: Volume of the EC2
  DeleteOnTermination:
    Type: String
    Description: Termination of the EC2
  VolumeSize:
    Type: Number
    Description: Volume size of the EC2
  InstanceType:
    Type: String
    Description: Instance type of the EC2
  KeyName:
    Type: String
    Description: Key pair of the EC2
  Protocol:
    Type: String
    Description: Protocol of the Security Group
  portdb:
    Type: String
    Description: port Number of the Database Security Group
  portapp1:
    Type: String
    Description: port Number Encryption of the Application Security Group
  portapp2:
    Type: String
    Description: port Number Encryption of the Application Security Group
  portapp3:
    Type: String
    Description: port Number Encryption of the Application Security Group
  portapp4:
    Type: String
    Description: port Number Encryption of the Application Security Group
  CidrIp:
    Type: String
    Description: CIDR IP of the Security Group
  ImageId:
    Type: String
    Description: AMI ID for the Image
  DBInstanceID:
    Description: My database instance
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and must not end with a hyphen
      or contain two consecutive hyphens.
  DBName:
    Description: My database
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric
      characters.
  DBInstanceClass:
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  DBAllocatedStorage:
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 20 and 65536 GiB.
  DBUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.
  userdata:
    Type: String
    Description: Userdata for EC2 Security Group
  awsaccount:
    Type: String
    Description: Account id
  awsregion:
    Type: String
    Description: Region for account
  TagKey:
    Description: The EC2 tag key that identifies this as a target for deployments.
    Type: String
    Default: Name
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
  TagValue:
    Description: The EC2 tag value that identifies this as a target for deployments.
    Type: String
    Default: CodeDeployDemo
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.
Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - _VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: Subnet1
      AvailabilityZone:
        Ref: AvailabilityZoneA
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - _public_subnet_1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: Subnet2
      AvailabilityZone:
        Ref: AvailabilityZoneB
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - _public_subnet_2
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: Subnet3
      AvailabilityZone:
        Ref: AvailabilityZoneC
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - _public_subnet_3
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - _Internet_Gateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - _Public_Routetable
  myRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock:
        Ref: IpAddr
      GatewayId:
        Ref: myInternetGateway
  mySubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  mySubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  mySubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: PublicRouteTable
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm:
              Ref: SSEAlgorithm
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
        - Id:
            Ref: LifecycleID
          Prefix:
            Ref: LifecyclePrefix
          Status:
            Ref: LifecycleStatus
          ExpirationInDays:
            Ref: LifecycleExpirationInDays
          Transitions:
          - TransitionInDays:
              Ref: LifecycleTransitionindays
            StorageClass:
              Ref: LifecycleStorageClass
  Securitygroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Port 80
      GroupName: Application
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
      - IpProtocol:
          Ref: Protocol
        FromPort:
          Ref: portapp1
        ToPort:
          Ref: portapp1
        CidrIp:
          Ref: CidrIp
      - IpProtocol:
          Ref: Protocol
        FromPort:
          Ref: portapp2
        ToPort:
          Ref: portapp2
        CidrIp:
          Ref: CidrIp
      - IpProtocol:
          Ref: Protocol
        FromPort:
          Ref: portapp3
        ToPort:
          Ref: portapp3
        CidrIp:
          Ref: CidrIp
      - IpProtocol:
          Ref: Protocol
        FromPort:
          Ref: portapp4
        ToPort:
          Ref: portapp4
        CidrIp:
          Ref: CidrIp
  Securitygroup2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Port 5432
      GroupName: Database
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
      - IpProtocol:
          Ref: Protocol
        FromPort:
          Ref: portdb
        ToPort:
          Ref: portdb
        SourceSecurityGroupId:
          Ref: Securitygroup1
  IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - s3:Get*
          - s3:List*
          - s3:Write*
          Effect: Allow
          Resource:
          - Fn::Join:
            - ''
            - - Ref: ARNBucketName
              - Ref: S3Bucket
          - Fn::Join:
            - ''
            - - Ref: ARNBucketName
              - Ref: S3Bucket
              - "/*"
      Roles:
      - Ref: IAMRole
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: IAMRole
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: The subnet available in VPC
      DBSubnetGroupName: VPC-Stack-Subnet
      SubnetIds:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      - Ref: PublicSubnet3
  circleciec2ami:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: circleci-ec2-ami
      Users:
      - cicd
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ec2:AttachVolume
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:CopyImage
          - ec2:CreateImage
          - ec2:CreateKeypair
          - ec2:CreateSecurityGroup
          - ec2:CreateSnapshot
          - ec2:CreateTags
          - ec2:CreateVolume
          - ec2:DeleteKeyPair
          - ec2:DeleteSecurityGroup
          - ec2:DeleteSnapshot
          - ec2:DeleteVolume
          - ec2:DeregisterImage
          - ec2:DescribeImageAttribute
          - ec2:DescribeImages
          - ec2:DescribeInstances
          - ec2:DescribeRegions
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSnapshots
          - ec2:DescribeSubnets
          - ec2:DescribeTags
          - ec2:DescribeVolumes
          - ec2:DetachVolume
          - ec2:GetPasswordData
          - ec2:ModifyImageAttribute
          - ec2:ModifyInstanceAttribute
          - ec2:ModifySnapshotAttribute
          - ec2:RegisterImage
          - ec2:RunInstances
          - ec2:StopInstances
          - ec2:TerminateInstances
          Resource: "*"
  CodeDeployEC2S3:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CodeDeploy-EC2-S3
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - s3:Get*
          - s3:List*
          Effect: Allow
          Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: CodeDeployS3
              - "/*"
  CircleCIUploadToS3:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CircleCI-Upload-To-S3
      Users:
      - cicd
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - s3:PutObject
          Effect: Allow
          Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: CodeDeployS3
              - "/*"
  CirlceCICodeDeploy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CirlceCI-Code-Deploy
      Users:
      - cicd
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - codedeploy:RegisterApplicationRevision
          - codedeploy:GetApplicationRevision
          Effect: Allow
          Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:codedeploy:'
              - Ref: awsregion
              - ":"
              - Ref: awsaccount
              - ":application:csye6225-webapp"
        - Action:
          - codedeploy:CreateDeployment
          - codedeploy:GetDeployment
          Effect: Allow
          Resource: "*"
        - Action:
          - codedeploy:GetDeploymentConfig
          Effect: Allow
          Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:codedeploy:'
              - Ref: awsregion
              - ":"
              - Ref: awsaccount
              - ":deploymentconfig:CodeDeployDefault.OneAtATime"
          - Fn::Join:
            - ''
            - - 'arn:aws:codedeploy:'
              - Ref: awsregion
              - ":"
              - Ref: awsaccount
              - ":deploymentconfig:CodeDeployDefault.HalfAtATime"
          - Fn::Join:
            - ''
            - - 'arn:aws:codedeploy:'
              - Ref: awsregion
              - ":"
              - Ref: awsaccount
              - ":deploymentconfig:CodeDeployDefault.AllAtOnce"
  CodeDeployEC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployEC2ServiceRole
      ManagedPolicyArns:
      - Ref: CodeDeployEC2S3
      - Ref: AccessAttachmentToS3Bucket
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codedeploy.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
  ec2instanceprofile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: CodeDeployEC2ServiceRoleProfile
      Roles:
      - Ref: CodeDeployEC2ServiceRole
  AccessAttachmentToS3Bucket:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: Access-Attachment-To-S3-Bucket
      Description: Policy for uploading attachments into S3
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - s3:Get*
          - s3:List*
          - s3:Delete*
          - s3:Put*
          Effect: Allow
          Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: S3Bucket
              - "/*"
  CodeDeployS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: codedeploy.vishaldamodharan30797.com
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm:
              Ref: SSEAlgorithm
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
        - Id:
            Ref: LifecycleID
          Prefix:
            Ref: LifecyclePrefix
          Status:
            Ref: LifecycleStatus
          ExpirationInDays:
            Ref: LifecycleExpirationInDays
          Transitions:
          - TransitionInDays:
              Ref: LifecycleTransitionindays
            StorageClass:
              Ref: LifecycleStorageClass
  RDSInstance:
    Type: AWS::RDS::DBInstance
    DependsOn:
    - DBSubnetGroup
    Properties:
      DBInstanceIdentifier:
        Ref: DBInstanceID
      DBName:
        Ref: DBName
      DBInstanceClass:
        Ref: DBInstanceClass
      AllocatedStorage:
        Ref: DBAllocatedStorage
      MultiAZ: 'true'
      Engine: postgres
      EngineVersion: '10'
      MasterUsername:
        Ref: DBUsername
      MasterUserPassword:
        Ref: DBPassword
      DBSubnetGroupName: VPC-Stack-Subnet
      VPCSecurityGroups:
      - Ref: Securitygroup2
  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
    - RDSInstance
    Properties:
      ImageId:
        Ref: ImageId
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SecurityGroupIds:
      - Ref: Securitygroup1
      - Ref: Securitygroup2
      SubnetId:
        Ref: PublicSubnet2
      BlockDeviceMappings:
      - DeviceName:
          Ref: DeviceName
        Ebs:
          VolumeType:
            Ref: VolumeType
          DeleteOnTermination:
            Ref: DeleteOnTermination
          VolumeSize:
            Ref: VolumeSize
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -xe \n"
            - "sudo chown -R ubuntu:ubuntu home/ubuntu/ \n"
            - Fn::Join:
              - ''
              - - sudo echo DB_USER=
                - Ref: DBUsername
                - " >> /home/ubuntu/.env \n"
            - Fn::Join:
              - ''
              - - sudo echo DB_NAME=
                - Ref: DBName
                - " >> /home/ubuntu/.env \n"
            - Fn::Join:
              - ''
              - - sudo echo DB_PASSWORD=
                - Ref: DBPassword
                - " >> /home/ubuntu/.env \n"
            - "sudo echo port1=5000 >>  /home/ubuntu/.env \n"
            - Fn::Join:
              - ''
              - - sudo echo DB_HOST=
                - Fn::GetAtt:
                  - RDSInstance
                  - Endpoint.Address
                - " >> /home/ubuntu/.env \n"
            - Fn::Join:
              - ''
              - - sudo echo S3_BUCKET_APP=
                - Ref: S3Bucket
                - ">> /home/ubuntu/.env \n"
      IamInstanceProfile:
        Ref: ec2instanceprofile
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - Ec2Instance
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: csye6225-webapp
      ComputePlatform: Server
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn:
    - CodeDeployServiceRole
    Properties:
      DeploymentGroupName: csye6225-webapp-deployment
      ApplicationName: csye6225-webapp
      ServiceRoleArn:
        Fn::Join:
        - ''
        - - 'arn:aws:iam::'
          - Ref: awsaccount
          - ":role/"
          - Ref: CodeDeployServiceRole
      AutoRollbackConfiguration:
        Enabled: 'true'
        Events:
        - DEPLOYMENT_FAILURE
      DeploymentStyle:
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      Ec2TagFilters:
      - Type: KEY_AND_VALUE
        Key: Name
        Value: stack-csye6225Ec2Instance
Outputs:
  VPCId:
    Description: VPCId of the newly created VPC
    Value:
      Ref: myVPC
  InternetGateway:
    Description: Internet Gateway of newly created VPC
    Value:
      Ref: myInternetGateway
  PubRouteTable:
    Description: Route Table of newly created VPC attached to Internet Gateway
    Value:
      Ref: PublicRouteTable
  BucketName:
    Description: S3 bucket created from cloudformation stack-csye6225
    Value:
      Ref: BucketName
  IAMRole:
    Description: IAM Role for EC2 and S3
    Value:
      Ref: IAMRole
  IAMPolicy:
    Description: IAM policy for EC2 & S3
    Value:
      Ref: IAMPolicy
  SecurtiyGroup:
    Description: Security Group for Application and database
    Value:
      Ref: Securitygroup1
  RDSInstance:
    Description: RDS Instance created from cloudformation stack-csye6225
    Value:
      Ref: RDSInstance
  EC2Instance:
    Description: EC2 Instance created from cloudformation stack-csye6225
    Value:
      Ref: EC2Instance
